// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Monad$Creed = require("../hkts/monad.bs.js");
var Higher$Creed = require("../higher.bs.js");
var Functor$Creed = require("../hkts/functor.bs.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var Applicative$Creed = require("../hkts/applicative.bs.js");

var shared = [
  "pure",
  "apply"
];

var E = Higher$Creed.Newtype2({ });

var class_tables = /* Cons */[
  undefined,
  undefined,
  undefined
];

function functor_e(param) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "fmap",
          "leftFmap"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var fmap = CamlinternalOO.get_method_label($$class, "fmap");
    var inh = CamlinternalOO.inherits($$class, 0, ["fmap"], ["leftFmap"], Functor$Creed.functor_, false);
    var obj_init = inh[0];
    CamlinternalOO.set_method($$class, fmap, (function (self$1, f, e) {
            if (e.tag) {
              return /* Left */Block.__(1, [e[0]]);
            } else {
              return /* Right */Block.__(0, [Curry._1(f, e[0])]);
            }
          }));
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._2(obj_init, env$1[1], self);
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              undefined,
              Functor$Creed.functor_[3]
            ]);
}

var class_tables$1 = /* Cons */[
  undefined,
  undefined,
  undefined
];

function applicative_e(param) {
  if (!class_tables$1[0]) {
    var $$class = CamlinternalOO.create_table([
          "pure",
          "liftA2",
          "apply"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, shared);
    var pure = ids[0];
    var apply = ids[1];
    var inh = CamlinternalOO.inherits($$class, 0, shared, ["liftA2"], Applicative$Creed.applicative_, false);
    var obj_init = inh[0];
    CamlinternalOO.set_methods($$class, [
          pure,
          (function (self$2, a) {
              return /* Right */Block.__(0, [a]);
            }),
          apply,
          (function (self$2, f, a) {
              if (f.tag) {
                return /* Left */Block.__(1, [f[0]]);
              } else if (a.tag) {
                return /* Left */Block.__(1, [a[0]]);
              } else {
                return /* Right */Block.__(0, [Curry._1(f[0], a[0])]);
              }
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._3(obj_init, env$1[1], self, functor_e(undefined));
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables$1[0] = env_init;
  }
  return Curry._1(class_tables$1[0], [
              undefined,
              Applicative$Creed.applicative_[3]
            ]);
}

var class_tables$2 = /* Cons */[
  undefined,
  undefined,
  undefined
];

function monad_e(param) {
  if (!class_tables$2[0]) {
    var $$class = CamlinternalOO.create_table([
          "bind",
          "return",
          "rightBind"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var bind = CamlinternalOO.get_method_label($$class, "bind");
    var inh = CamlinternalOO.inherits($$class, 0, ["bind"], [
          "return",
          "rightBind"
        ], Monad$Creed.monad_, false);
    var obj_init = inh[0];
    CamlinternalOO.set_method($$class, bind, (function (self$3, f, m) {
            if (m.tag) {
              return /* Left */Block.__(1, [m[0]]);
            } else {
              return Curry._1(f, m[0]);
            }
          }));
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._3(obj_init, env$1[1], self, applicative_e(undefined));
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables$2[0] = env_init;
  }
  return Curry._1(class_tables$2[0], [
              undefined,
              Monad$Creed.monad_[3]
            ]);
}

exports.E = E;
exports.functor_e = functor_e;
exports.applicative_e = applicative_e;
exports.monad_e = monad_e;
/* E Not a pure module */
