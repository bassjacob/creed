// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Higher$Creed = require("../higher.bs.js");
var Monoid$Creed = require("../hkts/monoid.bs.js");
var Functor$Creed = require("../hkts/functor.bs.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var Foldable$Creed = require("../hkts/foldable.bs.js");

var shared = [
  "mempty",
  "mappend"
];

var L = Higher$Creed.Newtype1({ });

var class_tables = /* Cons */[
  undefined,
  undefined,
  undefined
];

function monoid_list(param) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "mappend",
          "mempty"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, shared);
    var mempty = ids[0];
    var mappend = ids[1];
    var inh = CamlinternalOO.inherits($$class, 0, shared, 0, Monoid$Creed.monoid_, false);
    var obj_init = inh[0];
    CamlinternalOO.set_methods($$class, [
          mempty,
          (function (self$1) {
              return /* [] */0;
            }),
          mappend,
          (function (self$1, l1, l2) {
              if (l1) {
                if (l2) {
                  return /* :: */[
                          l1[0],
                          Curry._3(self$1[0][mappend], self$1, l1[1], l2)
                        ];
                } else {
                  return l1;
                }
              } else if (l2) {
                return l2;
              } else {
                return Curry._1(self$1[0][mempty], self$1);
              }
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._2(obj_init, env$1[1], self);
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              undefined,
              Monoid$Creed.monoid_[3]
            ]);
}

var class_tables$1 = /* Cons */[
  undefined,
  undefined,
  undefined
];

function foldable_list(param) {
  if (!class_tables$1[0]) {
    var $$class = CamlinternalOO.create_table([
          "null",
          "toList",
          "foldl",
          "foldr",
          "length"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var foldr = CamlinternalOO.get_method_label($$class, "foldr");
    var inh = CamlinternalOO.inherits($$class, 0, ["foldr"], [
          "foldl",
          "length",
          "null",
          "toList"
        ], Foldable$Creed.foldable_, false);
    var obj_init = inh[0];
    CamlinternalOO.set_method($$class, foldr, (function (self$2, f, b, l) {
            if (l) {
              return Curry._4(self$2[0][foldr], self$2, f, Curry._2(f, l[0], b), l[1]);
            } else {
              return b;
            }
          }));
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._2(obj_init, env$1[1], self);
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables$1[0] = env_init;
  }
  return Curry._1(class_tables$1[0], [
              undefined,
              Foldable$Creed.foldable_[3]
            ]);
}

var $$class = CamlinternalOO.create_table([
      "fmap",
      "leftFmap"
    ]);

var fmap = CamlinternalOO.get_method_label($$class, "fmap");

var inh = CamlinternalOO.inherits($$class, 0, ["fmap"], ["leftFmap"], Functor$Creed.functor_, true);

var obj_init = inh[0];

CamlinternalOO.set_method($$class, fmap, (function (self$3, g, l) {
        if (l) {
          return /* :: */[
                  Curry._1(g, l[0]),
                  Curry._3(self$3[0][fmap], self$3, g, l[1])
                ];
        } else {
          return /* [] */0;
        }
      }));

function obj_init$1(env) {
  var self = CamlinternalOO.create_object_opt(undefined, $$class);
  Curry._1(obj_init, self);
  return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
}

CamlinternalOO.init_class($$class);

var functor_l = obj_init$1(undefined);

exports.L = L;
exports.monoid_list = monoid_list;
exports.foldable_list = foldable_list;
exports.functor_l = functor_l;
/* L Not a pure module */
