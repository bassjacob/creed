// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Higher$Creed = require("../src/higher.bs.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

var shared = [
  "mm",
  "pf"
];

var shared$1 = ["fmap"];

var shared$2 = ["wrap"];

var shared$3 = [
  "bind",
  "return"
];

var shared$4 = [
  "return",
  "bind"
];

var shared$5 = [
  "wrap",
  "mm",
  "pf"
];

function monad_001($$class) {
  CamlinternalOO.get_method_labels($$class, shared$4);
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var monad = /* class */[
  undefined,
  monad_001,
  undefined,
  undefined
];

function functor__001($$class) {
  CamlinternalOO.get_method_label($$class, "fmap");
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var functor_ = /* class */[
  undefined,
  functor__001,
  undefined,
  undefined
];

function freelike_001($$class) {
  var pf = CamlinternalOO.new_variable($$class, "");
  var mm = CamlinternalOO.new_variable($$class, "");
  var ids = CamlinternalOO.get_method_labels($$class, [
        "wrap",
        "pf",
        "mm"
      ]);
  var pf$1 = ids[1];
  var mm$1 = ids[2];
  CamlinternalOO.set_methods($$class, [
        pf$1,
        (function (self$3) {
            return self$3[pf];
          }),
        mm$1,
        (function (self$3) {
            return self$3[mm];
          })
      ]);
  return (function (env, self, pf$2, mm$2) {
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      self$1[mm] = mm$2;
      self$1[pf] = pf$2;
      return self$1;
    });
}

var freelike = /* class */[
  undefined,
  freelike_001,
  undefined,
  undefined
];

var C = Higher$Creed.Newtype2({ });

var class_tables = /* Cons */[
  undefined,
  undefined,
  undefined
];

function monad_c(param) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(shared$3);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, shared$4);
    var $$return = ids[0];
    var bind = ids[1];
    var inh = CamlinternalOO.inherits($$class, 0, shared$4, 0, monad, false);
    var obj_init = inh[0];
    CamlinternalOO.set_methods($$class, [
          $$return,
          (function (self$4, a) {
              return {
                      c: (function (h) {
                          return Curry._1(h, a);
                        })
                    };
            }),
          bind,
          (function (self$4) {
              return (function (m, k) {
                  var k$1 = Curry.__1(k);
                  var p = m.c;
                  return {
                          c: (function (h) {
                              return Curry._1(p, (function (a) {
                                            return Curry._1(Curry._1(k$1, a).c, h);
                                          }));
                            })
                        };
                });
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._2(obj_init, env$1[1], self);
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              undefined,
              undefined
            ]);
}

function rep(o, m) {
  return {
          c: (function (k) {
              return Caml_oo_curry.js3(-1055459907, 1, o, m, k);
            })
        };
}

function abs(o, c) {
  return Curry._1(c.c, Caml_oo_curry.js1(153986224, 2, o));
}

var Free = Higher$Creed.Newtype2({ });

var class_tables$1 = /* Cons */[
  undefined,
  undefined,
  undefined
];

function monad_free(functor_free) {
  if (!class_tables$1[0]) {
    var $$class = CamlinternalOO.create_table(shared$3);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, shared$4);
    var $$return = ids[0];
    var bind = ids[1];
    var inh = CamlinternalOO.inherits($$class, 0, shared$4, 0, monad, false);
    var obj_init = inh[0];
    CamlinternalOO.set_methods($$class, [
          $$return,
          (function (self$5, v) {
              return /* Return */Block.__(0, [v]);
            }),
          bind,
          (function (self$5) {
              var env$1 = self$5[env];
              var bind = function (m, k) {
                if (!m.tag) {
                  return Curry._1(k, m[0]);
                }
                var tmp = env$1[0];
                return /* Wrap */Block.__(1, [Caml_oo_curry.js3(-1010905610, 4, tmp, (function (m) {
                                  return bind(m, k);
                                }), m[0])]);
              };
              return (function (m, k) {
                  return bind(m, Curry.__1(k));
                });
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._2(obj_init, env$1[1], self);
      self[env] = env$1[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables$1[0] = env_init;
  }
  return Curry._1(class_tables$1[0], [
              [functor_free],
              undefined
            ]);
}

var class_tables$2 = /* Cons */[
  undefined,
  undefined,
  undefined
];

function freelike_free(ff) {
  if (!class_tables$2[0]) {
    var $$class = CamlinternalOO.create_table(shared$5);
    var env = CamlinternalOO.new_variable($$class, "");
    var wrap = CamlinternalOO.get_method_label($$class, "wrap");
    var inh = CamlinternalOO.inherits($$class, 0, shared$2, shared, freelike, false);
    var obj_init = inh[0];
    CamlinternalOO.set_method($$class, wrap, (function (self$6, x) {
            var tmp = self$6[env][0];
            return /* Wrap */Block.__(1, [Caml_oo_curry.js3(-1010905610, 6, tmp, (function (prim) {
                              return prim;
                            }), x)]);
          }));
    var env_init = function (env$1) {
      var env$2 = env$1[0];
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._4(obj_init, env$1[1], self, env$2[1], monad_free(env$2[1]));
      self[env] = env$2[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables$2[0] = env_init;
  }
  return Curry._1(class_tables$2[0], [
              [
                [ff],
                ff
              ],
              undefined
            ]);
}

var class_tables$3 = /* Cons */[
  undefined,
  undefined,
  undefined
];

function freelike_c(f_functor, freelike$1) {
  if (!class_tables$3[0]) {
    var $$class = CamlinternalOO.create_table(shared$5);
    var env = CamlinternalOO.new_variable($$class, "");
    var wrap = CamlinternalOO.get_method_label($$class, "wrap");
    var inh = CamlinternalOO.inherits($$class, 0, shared$2, shared, freelike, false);
    var obj_init = inh[0];
    CamlinternalOO.set_method($$class, wrap, (function (self$7, t) {
            var env$1 = self$7[env];
            return {
                    c: (function (h) {
                        var tmp = env$1[0];
                        var tmp$1 = env$1[1];
                        return Caml_oo_curry.js2(-822134326, 10, tmp$1, Caml_oo_curry.js3(-1010905610, 9, tmp, (function (p) {
                                          return Curry._1(p.c, h);
                                        }), t));
                      })
                  };
          }));
    var env_init = function (env$1) {
      var env$2 = env$1[0];
      var self = CamlinternalOO.create_object_opt(undefined, $$class);
      Curry._4(obj_init, env$1[1], self, env$2[1], monad_c(undefined));
      self[env] = env$2[0];
      return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables$3[0] = env_init;
  }
  return Curry._1(class_tables$3[0], [
              [
                [
                  f_functor,
                  freelike$1
                ],
                f_functor
              ],
              undefined
            ]);
}

function improve(d, param) {
  return abs(monad_free(d), Curry._1(param.fl, freelike_c(d, freelike_free(d))));
}

var F_io = Higher$Creed.Newtype1({ });

var $$class = CamlinternalOO.create_table(shared$1);

var fmap = CamlinternalOO.get_method_label($$class, "fmap");

var inh = CamlinternalOO.inherits($$class, 0, shared$1, 0, functor_, true);

var obj_init = inh[0];

CamlinternalOO.set_method($$class, fmap, (function (self$8, h, l) {
        if (l.tag) {
          return /* PutChar */Block.__(1, [
                    l[0],
                    Curry._1(h, l[1])
                  ]);
        }
        var f = l[0];
        return /* GetChar */Block.__(0, [(function (x) {
                      return Curry._1(h, Curry._1(f, x));
                    })]);
      }));

function obj_init$1(env) {
  var self = CamlinternalOO.create_object_opt(undefined, $$class);
  Curry._1(obj_init, self);
  return CamlinternalOO.run_initializers_opt(undefined, self, $$class);
}

CamlinternalOO.init_class($$class);

var functor_f_io = obj_init$1(undefined);

function getChar(f) {
  var tmp = Caml_oo_curry.js1(24416, 11, f);
  return Caml_oo_curry.js2(-822134326, 13, f, /* GetChar */Block.__(0, [Caml_oo_curry.js1(153986224, 12, tmp)]));
}

function putChar(f, c) {
  var tmp = Caml_oo_curry.js1(24416, 14, f);
  return Caml_oo_curry.js2(-822134326, 16, f, /* PutChar */Block.__(1, [
                c,
                Caml_oo_curry.js2(153986224, 15, tmp, undefined)
              ]));
}

function revEcho(f) {
  var $great$great$eq = function (c) {
    var tmp = Caml_oo_curry.js1(24416, 17, f);
    return Caml_oo_curry.js2(-1055459907, 18, tmp, c);
  };
  return Curry._1($great$great$eq(getChar(f)), (function (c) {
                if (c !== /* " " */32) {
                  return Curry._1($great$great$eq(revEcho(f)), (function (param) {
                                return putChar(f, c);
                              }));
                }
                var tmp = Caml_oo_curry.js1(24416, 21, f);
                return Caml_oo_curry.js2(153986224, 22, tmp, undefined);
              }));
}

function run(f, cs) {
  if (!f.tag) {
    return /* Finish */Block.__(2, [f[0]]);
  }
  var x = f[0];
  if (x.tag) {
    return /* Print */Block.__(1, [
              x[0],
              run(x[1], cs)
            ]);
  } else {
    return /* Read */Block.__(0, [run(Curry._1(x[0], Belt_List.headExn(cs)), Belt_List.tailExn(cs))]);
  }
}

function simulate_original(stream) {
  return run(revEcho(freelike_free(functor_f_io)), stream);
}

function simulate_improved(stream) {
  return run(improve(functor_f_io, {
                  fl: revEcho
                }), stream);
}

exports.monad = monad;
exports.functor_ = functor_;
exports.freelike = freelike;
exports.C = C;
exports.monad_c = monad_c;
exports.rep = rep;
exports.abs = abs;
exports.Free = Free;
exports.monad_free = monad_free;
exports.freelike_free = freelike_free;
exports.freelike_c = freelike_c;
exports.improve = improve;
exports.F_io = F_io;
exports.functor_f_io = functor_f_io;
exports.getChar = getChar;
exports.putChar = putChar;
exports.revEcho = revEcho;
exports.run = run;
exports.simulate_original = simulate_original;
exports.simulate_improved = simulate_improved;
/* C Not a pure module */
