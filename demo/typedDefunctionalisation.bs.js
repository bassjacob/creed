// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function fold(param) {
  var l = param[2];
  var u = param[1];
  if (!l) {
    return u;
  }
  var f = param[0];
  return Curry._1(f, /* tuple */[
              l[0],
              fold(/* tuple */[
                    f,
                    u,
                    l[1]
                  ])
            ]);
}

function sum(l) {
  return fold(/* tuple */[
              (function (param) {
                  return param[0] + param[1] | 0;
                }),
              0,
              l
            ]);
}

function add(param) {
  var n = param[0];
  return fold(/* tuple */[
              (function (param) {
                  return /* :: */[
                          param[0] + n | 0,
                          param[1]
                        ];
                }),
              /* [] */0,
              param[1]
            ]);
}

var Original = {
  fold: fold,
  sum: sum,
  add: add
};

function apply(param) {
  var v = param[1];
  var appl = param[0];
  if (appl) {
    return /* :: */[
            v[0] + appl[0] | 0,
            v[1]
          ];
  } else {
    return v[0] + v[1] | 0;
  }
}

function fold$1(param) {
  var l = param[2];
  var u = param[1];
  if (!l) {
    return u;
  }
  var f = param[0];
  return apply(/* tuple */[
              f,
              /* tuple */[
                l[0],
                fold$1(/* tuple */[
                      f,
                      u,
                      l[1]
                    ])
              ]
            ]);
}

function sum$1(l) {
  return fold$1(/* tuple */[
              /* Fn_plus */0,
              0,
              l
            ]);
}

function add$1(param) {
  return fold$1(/* tuple */[
              /* Fn_plus_cons */[param[0]],
              /* [] */0,
              param[1]
            ]);
}

var Defunctionalized = {
  apply: apply,
  fold: fold$1,
  sum: sum$1,
  add: add$1
};

exports.Original = Original;
exports.Defunctionalized = Defunctionalized;
/* No side effect */
